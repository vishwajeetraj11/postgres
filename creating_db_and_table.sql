
/*
Create Table
Full General Syntax 
Create Table table_name(
	column_name TYPE column_constraint,
	column_name TYPE column_constraint,
	table_constraint table_constraint
)	INHERITS existing_table_name;

Example:- 
CREATE TABLE players(
player_id SERIAL column_constraint,
column_name TYPE column_constraint,
);

SERIAL
- In PostgreSQL, a sequence is a special kind of database object that generates a sequence of integers.
- A sequence is often used as the primary key column in a table.
- It will create a sequence object and set the next value generated by the sequence as the default value for the column.
- This is perfect for a primary key, because it logs unique integer entries for you. 
- If a row is later removed, the column with the serial data type will not adjust, marking the fact that a row was removed from the sequence, for example 1,2,3,5,6,7.
- You know row 4 was removed at some point.

CREATE TABLE players(
	player_id SERIAL PRIMARY KEY,
	age SMALLINT NOT NULL,
	);
*/

CREATE TABLE account(
	user_id SERIAL PRIMARY KEY,
	username VARCHAR(50) NOT NULL UNIQUE,
	password VARCHAR(50) NOT NULL,
	email VARCHAR(250) NOT NULL UNIQUE,
	created_at TIMESTAMP NOT NULL,
	last_login TIMESTAMP
);

CREATE TABLE job(
	job_id SERIAL PRIMARY KEY,
	job_name VARCHAR(200) UNIQUE NOT NULL
);

CREATE TABLE account_job(
	user_id INTEGER REFERENCES account(user_id),
	job_Id INTEGER REFERENCES job(job_id),
	hire_date TIMESTAMP
);

/*
INSERT allows you to add in rows to a table.
General Syntax
INSERT INTO table(column1, column2, ...)
VALUES
(value1, value2, ...).
(value1, value2, ...), ...;

Inserting into a table from another table
INSERT INTO table(column1, column2, ...)
SELECT column, column2, ...
FROM another_table
WHERE condition;

Keep in mind, the inserted row values must match up for the table, including constraints.
SERIAL columns do not need to be provided a value.
*/

SELECT * FROM account;
SELECT * FROM account_job;
SELECT * FROM job;

INSERT INTO account(username, password, email, created_at)
VALUES
('vishwajeetraj11', 'password', 'vishwajeetraj11@gmail.com', CURRENT_TIMESTAMP)
;

INSERT INTO job(job_name) 
VALUES
('Singer'),
('Pharmacist'),
('Doctor')
;

INSERT INTO account_job(user_id, job_id, hire_date)
VALUES
(1,1,CURRENT_TIMESTAMP);

SELECT 
username, job_name, email
FROM
account_job 
INNER JOIN account 
ON account_job.user_id = account.user_id
INNER JOIN job
ON account_job.job_id = job.job_id;

--  Error because user_id 10 does not exist.
INSERT INTO account_job(user_id, job_id, hire_date)
VALUES 
	(10,10, CURRENT_TIMESTAMP);

/*
The UPDATE keyword allows for the changing of values of the columns in a table.

General Syntax:-
UPDATE table
SET column1=value1,
column2=value2, ...
WHERE 
condition;

Example:- Update (last_login)
UPDATE account
SET last_login=CURRENT_TIMESTAMP
WHERE last_login IS null;

Reset everything without WHERE condition
UPDATE account
SET last_login=CURRENT_TIMESTAMP

Set based on another column
UPDATE account SET last_login = created_at;

Using another table's value (UPDATE join)
UPDATE TableA
SET original_col=TableB.new_col
FROM 
WHERE tableA.id=TableB.id

Return affected rows
UPDATE account SET last_login = created_at RETURNING account_id,last_login 
*/

-- Updated but no output of the updated field.
UPDATE account 
SET last_login=CURRENT_TIMESTAMP;

UPDATE account 
SET last_login=created_at
RETURNING  user_id,last_login,created_at
;

-- Changing hire_date based on another table (forget logic just for implementing purposes learning syntax)
UPDATE account_job
SET hire_date=account.created_at
FROM account
WHERE account_job.user_id = account.user_id;

/*
DELETE Clause

we can use the DELETE clause to remove rows from a table.
For ex:
DELETE FROM table WHERE row_id=1

Delete rows based on their presence in other tables
For ex:
DELETE FROM tableA
USING tableB
WHERE tableA.id=TableB.id

We can delete all rows from a table 
DELETE FROM table

Similar to the UPDATE command, you can also add in a RETURNING call to return rows that were removed.
*/

DELETE FROM job WHERE job_id=2 RETURNING job_id,job_name;

/*
The ALTER clause allows for changes to an existing table structure, such as:
Adding, dropping or renaming columns
Changing a column's data type
Set DEFAULT values for a column
Add CHECK constraints
Rename table

General Syntax:-
ALTER TABLE table_name action

Adding Columns
ALTER TABLE table_name
ADD COLUMN new_col TYPE

Removing Columns
ALTER TABLE table_name
DROP COLUMN col_name

ALTER constraints
ALTER TABLE table_name
ALTER COLUMN col_name
SET DEFAULT value
DROP DEFAULT

Remove or Add NOT NULL contstraint.
SET NOT NULL
ADD CONSTRAINT constraint_name
*/

CREATE TABLE information(
	info_id SERIAL PRIMARY KEY,
	title VARCHAR(500) NOT NULL,
	person VARCHAR(50) NOT NULL UNIQUE
);

-- Rename the table
ALTER TABLE information RENAME TO new_info;

SELECT * FROM new_info;

ALTER TABLE new_info RENAME COLUMN person TO people;

SELECT * FROM new_info;

-- Error people required..
INSERT INTO new_info(title)
VALUES
('Some title');

-- Alter constraints
ALTER TABLE new_info
ALTER COLUMN people DROP NOT NULL; -- DROP to remove SET to add

INSERT INTO new_info(title)
VALUES
('Some title');

/*
DROP allows for the complete removal of a column in a table.
In PostgreSQL this will also automatically all of its indexes and constraints involving column.
However, it will not remove columns used in views, triggers, or stired procedures without the additional CASCADE clause.

General Syntax 
ALTER TABLE table_name
DROP COLUMN col_name

Remove all dependencies 
ALTER TABLE table_name
DROP COLUMN col_name CASCADE

Check for existence to avoid error
ALTER TABLE table_name
DROP COLUMN IF EXISTS col_name

Drop multiple columns
ALTER TABLE table_name
DROP COLUMN col_one,
DROP COLUMN col_two
*/

ALTER TABLE new_info 
DROP COLUMN people;

SELECT * FROM new_info;

-- If table does'nt exist then no error if exists then delete
ALTER TABLE new_info 
DROP COLUMN IF EXISTS people;

/*
The CHECK constraint allows us to create more customized constraints that adhere to a certain condition.
Such as making sure all insterted integer values fall below a certain threshold.

General Syntax:
CREATE TABLE expample(
ex_id SERIAL PRIMARY KEY,
age SMALLINT CHECK (age>21),
parent_age SMALLINT CHECK(parent_age > age)
);
*/

CREATE TABLE employees(
	emp_id SERIAL PRIMARY KEY,
	first_name VARCHAR(50) NOT NULL,
	last_name VARCHAR(50) NOT NULL,
	birthdate DATE CHECK (birthdate > '1900-01-01'),
	hire_date DATE CHECK (hire_date > birthdate),
	salary INTEGER CHECK (salary > 0)
)

-- Error Violate CHECK Constraint
-- new row for relation "employees" violates check constraint "employees_birthdate_check"
INSERT INTO employees(
	first_name,
	last_name,
	birthdate,
	hire_date,
	salary
)
VALUES
(
	'Vishwajeet', 
	'Raj',
	'1899-11-03',
	'2010-01-01',
	100
)

INSERT INTO employees(
	first_name,
	last_name,
	birthdate,
	hire_date,
	salary
)
VALUES
(
	'Vishwajeet', 
	'Raj',
	'1990-11-03',
	'2010-01-01',
	100
)

SELECT * FROM employees;
















